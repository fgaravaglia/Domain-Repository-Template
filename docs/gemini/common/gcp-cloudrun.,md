# Cloud Run Best practices

this document explain the best practices specifically for dotnet in order to interact with Cloud Run service.

# Calling an authenticated Cloud Run service

This instruction demonstrates authenticated service to service calls using an ID token with Cloud Run. The use case is: "Service A" (this service) -> "Service B" (Authenticated).

## Package Reference

First of all, you need to add the needed package from Google:
```bash
dotnet add package Google.Cloud.Iam.Credentials.V1
```

## Generating the JWT to invoke authaneticated service

We need to use Google's library to genereate an ID Token and then the JWT.

```csharp
using Google.Cloud.Iam.Credentials.V1;

. . .

string serviceUrl = "";

// retrieving the Token OIDC
var token = await GetTokenAsync(serviceUrl);

// create the client for second service and set bearer token by creating a new one
var client = clientFactory.CreateClient("NamedClient");
client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", await token.GetAccessTokenAsync());

using var response = await client.GetAsync("/ping");
if (!response.IsSuccessStatusCode)
    return Results.BadRequest($"Response was: {response.ReasonPhrase}");
string content = await resposne.Content.ReadAsStringAsync();

// Metodo per ottenere il token OIDC
async Task<OidcToken> GetTokenAsync(string serviceUrl)
{
    var credentials = await GoogleCredential.GetApplicationDefaultAsync();
    
    var token = await credentials.GetOidcTokenAsync(OidcTokenOptions.FromTargetAudience(serviceUrl));
    
    return token;
}
```

## User & Service Accounts

Google's [Best practices for using service accounts](https://cloud.google.com/iam/docs/best-practices-service-accounts#using_service_accounts) suggests using [service account impersonation](https://cloud.google.com/docs/authentication/use-service-account-impersonation) when developing locally.
The beasi idea is:

Developer -> Impersonate a Service Account -> Invoke Cloud run Service

then:

1. Set your service account email, for example.
    ```bash
    PROJECT_ID=$(gcloud config get project)

    export SERVICE_ACCOUNT=cr-id-token@$PROJECT_ID.iam.gserviceaccount.com
    ```

2. Create your service account:
      ```bash
      gcloud iam service-accounts create $SERVICE_ACCOUNT --project $PROJECT_ID
      ```

3. Ensure that your **service account** has the `roles/run.invoker` role in order to be able to invoke another Cloud Run service.
      ```bash
      gcloud projects add-iam-policy-binding $PROJECT_ID \
            --member="serviceAccount:$SERVICE_ACCOUNT" \
            --role="roles/run.invoker"
      ```

4. Ensure that YOUR **user account** that you login interactively in the console has the `Service Account OpenID Connect Identity Token Creator` role.  
**NOTE** Even if you are an administrator in your GCP Project, you will need this role or similar role which has the `iam.serviceAccounts.getOpenIdToken` permission.

5. Login using Service Account Impersonation with [Application Default Credentials](https://cloud.google.com/docs/authentication/provide-credentials-adc):

    ```bash
    gcloud auth application-default login --impersonate-service-account $SERVICE_ACCOUNT

    export GOOGLE_APPLICATION_CREDENTIALS=$HOME/.config/gcloud/application_default_credentials.json
    ```
this command will print an Url to be open to login as developer. then, a credential json file will be saved locally, to be loaded in the Environment variable.

